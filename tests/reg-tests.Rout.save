
R version 3.3.0 Patched (2016-05-12 r70603) -- "Supposedly Educational"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> suppressMessages(library(gpclib))
> 
> ## Make some random polygons
> set.seed(100)
> a <- cbind(rnorm(100), rnorm(100))
> a <- a[chull(a), ]
> 
> ## Convert `a' from matrix to "gpc.poly"
> a <- as(a, "gpc.poly")
> show(a)
GPC Polygon
   Num. Contours:  1 
   Num. Vertices:  9 
   BBox (X):  -2.271925 --> 2.581959 
   BBox (Y):  -2.136494 --> 2.1686 
> 
> b <- cbind(rnorm(100), rnorm(100))
> b <- as(b[chull(b), ], "gpc.poly")
> show(b)
GPC Polygon
   Num. Contours:  1 
   Num. Vertices:  9 
   BBox (X):  -3.020814 --> 2.727888 
   BBox (Y):  -2.676379 --> 3.304151 
> 
> ## More complex polygons with an intersection
> p1 <- read.polyfile(system.file("poly-ex/ex-poly1.txt", package = "gpclib"))
> p2 <- read.polyfile(system.file("poly-ex/ex-poly2.txt", package = "gpclib"))
> 
> ## Plot both polygons and highlight their intersection in red
> plot(app <- append.poly(p1, p2))
> show(app)
GPC Polygon
   Num. Contours:  2 
   BBox (X):  316.1636 --> 319.2698 
   BBox (Y):  91.66837 --> 93.8952 
> plot(int <- intersect(p1, p2), poly.args = list(col = 2), add = TRUE)
> show(int)
GPC Polygon
   Num. Contours:  2 
   BBox (X):  317.0437 --> 318.0591 
   BBox (Y):  91.81092 --> 93.14354 
> 
> ## Highlight the difference p1 \ p2 in green
> plot(sdif <- setdiff(p1, p2), poly.args = list(col = 3), add = TRUE)
> show(sdif)
GPC Polygon
   Num. Contours:  1 
   Num. Vertices:  112 
   BBox (X):  316.1636 --> 317.9963 
   BBox (Y):  91.66837 --> 93.8952 
> 
> ## Highlight the difference p2 \ p1 in blue
> plot(sdif <- setdiff(p2, p1), poly.args = list(col = 4), add = TRUE)
> str(sdif)
Formal class 'gpc.poly' [package "gpclib"] with 1 slot
  ..@ pts:List of 1
  .. ..$ :List of 3
  .. .. ..$ x   : num [1:71] 319 319 319 319 319 ...
  .. .. ..$ y   : num [1:71] 93.3 93.2 93 92.9 92.8 ...
  .. .. ..$ hole: logi FALSE
> 
> ## Plot the union of the two polygons
> plot(un <- union(p1, p2))
> str(un)
Formal class 'gpc.poly' [package "gpclib"] with 1 slot
  ..@ pts:List of 2
  .. ..$ :List of 3
  .. .. ..$ x   : num [1:120] 318 318 318 318 318 ...
  .. .. ..$ y   : num [1:120] 93.8 93.7 93.6 93.4 93.3 ...
  .. .. ..$ hole: logi FALSE
  .. ..$ :List of 3
  .. .. ..$ x   : num [1:24] 318 318 318 318 318 ...
  .. .. ..$ y   : num [1:24] 93.1 93 93 92.9 92.9 ...
  .. .. ..$ hole: logi TRUE
> 
> ## Take the non-intersect portions and create a new polygon
> ## combining the two contours
> p.comb <- append.poly(setdiff(p1, p2), setdiff(p2, p1))
> str(p.comb)
Formal class 'gpc.poly' [package "gpclib"] with 1 slot
  ..@ pts:List of 2
  .. ..$ :List of 3
  .. .. ..$ x   : num [1:112] 318 318 318 318 318 ...
  .. .. ..$ y   : num [1:112] 93.8 93.7 93.6 93.4 93.3 ...
  .. .. ..$ hole: logi FALSE
  .. ..$ :List of 3
  .. .. ..$ x   : num [1:71] 319 319 319 319 319 ...
  .. .. ..$ y   : num [1:71] 93.3 93.2 93 92.9 92.8 ...
  .. .. ..$ hole: logi FALSE
> 
> 
> 
> ## Coerce from a matrix
> x <- 
+ structure(c(0.0934073560027759, 0.192713393476752, 0.410062456627342, 
+ 0.470020818875781, 0.41380985426787, 0.271408743927828, 0.100902151283831, 
+ 0.0465648854961832, 0.63981588032221, 0.772382048331416,
+ 0.753739930955121, 0.637744533947066, 0.455466052934407,
+ 0.335327963176065, 0.399539700805524, 
+ 0.600460299194476), .Dim = c(8, 2))
> y <- 
+ structure(c(0.404441360166551, 0.338861901457321, 0.301387925052047, 
+ 0.404441360166551, 0.531852879944483, 0.60117973629424, 0.625537820957668, 
+ 0.179976985040276, 0.341542002301496, 0.445109321058688,
+ 0.610817031070196, 0.596317606444189, 0.459608745684695,
+ 0.215189873417722), .Dim = c(7, 2))
> 
> x1 <- as(x, "gpc.poly")
> y1 <- as(y, "gpc.poly")
> 
> plot(append.poly(x1, y1))
> plot(intersect(x1, y1), poly.args = list(col = 2), add = TRUE)
> 
> 
> ## Show the triangulation
> plot(append.poly(x1, y1))
> triangles <- triangulate(append.poly(x1,y1))
> print(triangles)
            [,1]      [,2]
 [1,] 0.40444136 0.1799770
 [2,] 0.62553782 0.2151899
 [3,] 0.39014840 0.2151899
 [4,] 0.61294593 0.3415420
 [5,] 0.39014840 0.2151899
 [6,] 0.62553782 0.2151899
 [7,] 0.39014840 0.2151899
 [8,] 0.61294593 0.3415420
 [9,] 0.33886190 0.3415420
[10,] 0.60907547 0.3803797
[11,] 0.33886190 0.3415420
[12,] 0.61294593 0.3415420
[13,] 0.33886190 0.3415420
[14,] 0.60907547 0.3803797
[15,] 0.32480916 0.3803797
[16,] 0.27140874 0.3353280
[17,] 0.32480916 0.3803797
[18,] 0.15177912 0.3803797
[19,] 0.15177912 0.3803797
[20,] 0.32480916 0.3803797
[21,] 0.10090215 0.3995397
[22,] 0.31787647 0.3995397
[23,] 0.10090215 0.3995397
[24,] 0.32480916 0.3803797
[25,] 0.10090215 0.3995397
[26,] 0.31787647 0.3995397
[27,] 0.08857824 0.4451093
[28,] 0.30138793 0.4451093
[29,] 0.08857824 0.4451093
[30,] 0.31787647 0.3995397
[31,] 0.08857824 0.4451093
[32,] 0.30138793 0.4451093
[33,] 0.04656489 0.6004603
[34,] 0.39800052 0.6004603
[35,] 0.04656489 0.6004603
[36,] 0.30138793 0.4451093
[37,] 0.04656489 0.6004603
[38,] 0.39800052 0.6004603
[39,] 0.05889185 0.6108170
[40,] 0.40444136 0.6108170
[41,] 0.05889185 0.6108170
[42,] 0.39800052 0.6004603
[43,] 0.32480916 0.3803797
[44,] 0.60907547 0.3803797
[45,] 0.41380985 0.4554661
[46,] 0.60159259 0.4554661
[47,] 0.41380985 0.4554661
[48,] 0.60907547 0.3803797
[49,] 0.41380985 0.4554661
[50,] 0.60159259 0.4554661
[51,] 0.41508738 0.4596087
[52,] 0.60117974 0.4596087
[53,] 0.41508738 0.4596087
[54,] 0.60159259 0.4554661
[55,] 0.41508738 0.4596087
[56,] 0.60117974 0.4596087
[57,] 0.45724560 0.5963176
[58,] 0.53185288 0.5963176
[59,] 0.45724560 0.5963176
[60,] 0.60117974 0.4596087
[61,] 0.45724560 0.5963176
[62,] 0.53185288 0.5963176
[63,] 0.45977507 0.6045201
[64,] 0.45977507 0.6045201
[65,] 0.46171693 0.6108170
[66,] 0.40444136 0.6108170
[67,] 0.05889185 0.6108170
[68,] 0.46171693 0.6108170
[69,] 0.09094196 0.6377445
[70,] 0.47002082 0.6377445
[71,] 0.09094196 0.6377445
[72,] 0.46171693 0.6108170
[73,] 0.09094196 0.6377445
[74,] 0.47002082 0.6377445
[75,] 0.09340736 0.6398159
[76,] 0.46895013 0.6398159
[77,] 0.09340736 0.6398159
[78,] 0.47002082 0.6377445
[79,] 0.09340736 0.6398159
[80,] 0.46895013 0.6398159
[81,] 0.17874848 0.7537399
[82,] 0.41006246 0.7537399
[83,] 0.17874848 0.7537399
[84,] 0.46895013 0.6398159
[85,] 0.17874848 0.7537399
[86,] 0.41006246 0.7537399
[87,] 0.19271339 0.7723820
> 
> proc.time()
   user  system elapsed 
  0.280   0.030   0.301 
